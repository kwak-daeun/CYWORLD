<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller, @Service 어노테이션 기능을 활성화 -->
	<annotation-driven />
	
	<!-- @Transactional 어노테이션 기능을 활성화 -->
	<tx:annotation-driven />
	
	<!-- @Aspect 어노테이션을 이용한 AOP 객체 관리를 활성화 -->
	<aop:aspectj-autoproxy />
	
	<!-- 인터셉터 설정 -->


	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- JSP(InternalResource)를 이용하여 View를 지정하는 객체 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		
		<!-- ViewResolver 동작 우선순위 - 1 -->
		<beans:property name="order" value="1" />
		
	</beans:bean>
	
	<!-- 스프링 빈 객체를 이용하여 View를 지정하는 객체 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	
		<!-- ViewResolver 동작 우선순위 - 0(낮은게 우선순위가 높음) -->
		<beans:property name="order" value="0" />
		
	</beans:bean>
	
	<!-- JSON 응답용 jsonView를 스프링 빈으로 등록 -->
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<beans:property name="contentType" value="application/json;charset=UTF-8" />
	</beans:bean>
	
	<!-- 파일 업로드가 필요하면 여기에 추가하기 -->
	<!-- 파일업로드 요청을 처리하는 클래스 등록 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	
		<!-- 메모리에서 파일을 처리할 수 있는 최대 사이즈 : 1MB -->
		<!-- <beans:property name="maxInMemorySize" value="1048576"/> -->
		<beans:property name="maxInMemorySize" value="324748364"/>
		
		<!-- 파일 업로드 최대 허용 사이즈 : 10MB -->
		<!-- <beans:property name="maxUploadSize" value="10485760"/> -->
		<beans:property name="maxUploadSize" value="3247483648"/>
	
		<!-- 업로드된 파일 하나 당 최대 사이즈 : 5MB -->
		<!-- <beans:property name="maxUploadSizePerFile" value="5242880"/> -->
		<beans:property name="maxUploadSizePerFile" value="3247483648"/>
	
	</beans:bean>
	
	<!-- 추후 추가 : 각 contoller, service -->
	<!-- ex) diary.controller, diary.service 등 -->
	<context:component-scan base-package="a.b.c, album.controller, album.service, book.controller, book.service, diary.controller, diary.service, reply.controller, reply.service, user.controller, user.service" />
</beans:beans>